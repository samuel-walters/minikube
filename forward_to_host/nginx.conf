# This "user" directive defines with which user Nginx will run the web server process.
# In this case, the user is called "nginx".
user nginx;
# Defines the number of worker processes.
# "auto" will try to autodetect the number of available CPU cores
# and set worker_processes to this value.
# (Worker processes process requests.)
worker_processes auto;

events {
    # The maximum number of simultaneous connections that each worker process can manage.
    # For example, if we had two worker_processes, then we could handle
    # 1024 x 2 clients simultaneously.
    worker_connections 1024;
}

http {
    server{
        # This Nginx server listens on port 80.
        listen 80;
        server_name localhost 127.0.0.1;

        location / {
            # Proxy configuration

            # Sets the HTTP protocol version for proxying. 1.1 is recommended
            # for keepalive (a directive that keeps the connection open for a
            # certain number of requests to the server or until the request
            # timeout period has expired).
            proxy_http_version 1.1;
            # Defines conditions under which the response will not be taken from a cache.
            proxy_cache_bypass $http_upgrade;
            # The "proxy_set_header" directive means the request header
            # passed to the proxied server can be appended to and redefined
            # (For example to convey details such as the IP address of the client).
            # (A request header is a component of a network packet sent by a client to
            # the server to request for a specific page or piece of data on the server.)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://10.96.38.140:80;
        }
    }
}